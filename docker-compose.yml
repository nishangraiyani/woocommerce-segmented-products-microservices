version: '3.8'

services:
  # Product Service
  product-service:
    build:
      context: .
      dockerfile: services/product-service/Dockerfile
    container_name: wc-product-service
    ports:
      - "5001:5001"
    env_file:
      - services/product-service/.env.docker
    networks:
      - wc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Segment Service
  segment-service:
    build:
      context: .
      dockerfile: services/segment-service/Dockerfile
    container_name: wc-segment-service
    ports:
      - "5002:5002"
    env_file:
      - services/segment-service/.env.docker
    networks:
      - wc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5002/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Gateway Service
  gateway:
    build:
      context: .
      dockerfile: services/gateway/Dockerfile
    container_name: wc-gateway
    ports:
      - "5000:5000"
    env_file:
      - services/gateway/.env.docker
    networks:
      - wc-network
    depends_on:
      product-service:
        condition: service_healthy
      segment-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: app/Dockerfile
      args:
        NEXT_PUBLIC_API_GATEWAY_URL: ${NEXT_PUBLIC_API_GATEWAY_URL:-http://localhost:5000}
        NEXT_PUBLIC_API_KEY: ${NEXT_PUBLIC_API_KEY:-dev-api-key-12345}
    container_name: wc-frontend
    ports:
      - "3000:3000"
    env_file:
      - app/.env.docker
    networks:
      - wc-network
    depends_on:
      gateway:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 20s

networks:
  wc-network:
    driver: bridge
    name: woocommerce-network

